

Comparable and Comparator both are interfaces and can be used to sort collection elements. ... 
Comparator injava.util, doesn't affect the original class , i.e., the actual class is not modified. 3) Comparable in java.lang package provides compareTo() method to sort elements.
Collections.sort(al, new NameComparator()); Collections.sort(List)

An abstract class allows you to create functionality that subclasses can implement or override. And a class can extend only one abstract class,
An interface only allows you to define functionality, not implement it. it can take advantage of multiple interfaces.

 An enum can, just like a class, have attributes and methods. The only
	 * difference is that enum constants are public, static and final (unchangeable
	 * - cannot be overridden). An enum cannot be used to create objects, and it
	 * cannot extend other classes (but it can implement interfaces).
DateTimeFormatter.ofPattern("yyy/MM/dd").format(localDate)
If you don't want duplicates, use Set ,
If you want to store key-value pair without duplicate key, use Map ,
	Hash Map If you want output in any order
	  or TreeMap if you want sorted ordering without null values, 
	   or LinkedHashMap if you want to maintain insertion order. 
	   
	   File f = new File("new.xlsx");
		FileInputStream fileIn = new FileInputStream(f);
		Workbook workbook = WorkbookFactory.create(fileIn);
		sheet = workbook.getSheetAt(0);
	   Row firstRow = sheet.getRow(0);
		for (Cell cell : firstRow) {
	   cell.getStringCellValue();
	   cell.getColumnIndex();
	   
	   cell.setCellValue((int)(Math.random()*100));
	   File f =  new File("new.xlsx"); 
		  	FileOutputStream fo= new FileOutputStream(f); 
		  	workbook.write(fo); 
	 
	 
	   To write in file
	   		FileOutputStream fos = new FileOutputStream("Text.txt");
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(al);
	To read from File
			FileInputStream fis = new FileInputStream("Text.txt");
			ObjectInputStream ois = new ObjectInputStream(fis);
			ArrayList<String> list = (ArrayList) ois.readObject();
			
    Connection con=DriverManager.getConnection("jdbc:postgresql://127.0.0.1:5432/postgres", "postgres", "mani4YOU");  
	Statement stmt=con.createStatement();  
	ResultSet rs=stmt.executeQuery("select * from employee");  
	//rs.absolute(3); ////getting the record of 3rd row  
	while(rs.next())  
	System.out.println(rs.getInt(1)+"  "+rs.getString(2)+"  "+rs.getString(3));  
	//stmt.executeUpdate("insert into employee values(33,'Irfan',50000)");  
	int result=stmt.executeUpdate("update employee set name='Vimal',salary=10000 where id=33");  
	con.close();  
	
	Prepare statement for parameterised query
	
		Savepoint spt1 = con.setSavepoint("svpt1");
	      stmt.execute(query1);
	       con.rollback(spt1);
     
	       
	       
	       
	       JavascriptExecutor je = (JavascriptExecutor) driver;
WebElement element = driver.findElement(By.xpath("//a[contains(text(),'Project on Github')]"));
je.executeScript("arguments[0].scrollIntoView(true);",element);
	       
    
	       
	       
	       TakesScreenshot scrShot = ((TakesScreenshot) webdriver);
		// Call getScreenshotAs method to create image file
		File SrcFile = scrShot.getScreenshotAs(OutputType.FILE);